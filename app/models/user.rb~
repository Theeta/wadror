class User < ActiveRecord::Base
  include RatingAverage
  
  has_secure_password
  
  validates :username, uniqueness: true,
                       length: { minimum: 3, maximum: 15 }
  validates :password, :format => {:with => /.*(?=.{4,})(?=.*\d)(?=.*[A-Z]).*/}
  
  has_many :ratings, dependent: :destroy
  has_many :beers, through: :ratings
  has_many :memberships, dependent: :destroy
  has_many :beer_clubs, through: :membership
  
  def favorite_beer
    return nil if ratings.empty?
    ratings.order(score: :desc).limit(1).first.beer         
  end
  
  def favorite_style
    return nil if ratings.empty?
    group_by_style = ratings.group_by { |r| r.beer.style }
    (average_ratings group_by_style).max_by { |style, average| average }[0]
  end

  def favorite_brewery
    calculate_favorite :brewery
  end

  def calculate_favorite(attribute)
    return nil if ratings.empty?

    groups = ratings.group_by { |r| r.beer.send attribute }
    groups = calculate_average_ratings_for groups
    groups.max_by { |key, avg_rating| avg_rating }[0]
  end

  def average_ratings(groups)
    groups.keys.each do |key|
      sum = groups[key].inject(0.0) { |sum, rating| sum + rating.score }
      groups[key] = sum / groups[key].count
    end
    return groups
  end
  
end
